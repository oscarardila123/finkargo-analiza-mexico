generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  password      String?
  role          UserRole     @default(VIEWER)
  companyId     String       @map("company_id")
  isActive      Boolean      @default(true) @map("is_active")
  lastLoginAt   DateTime?    @map("last_login_at")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  
  company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  activities    UserActivity[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Company {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  nit               String?           @unique
  address           String?
  city              String?
  country           String            @default("Colombia")
  phone             String?
  website           String?
  industryType      String?           @map("industry_type")
  companySize       CompanySize       @default(SMALL) @map("company_size")
  annualImportValue Float?            @map("annual_import_value")
  subscriptionId    String?           @unique @map("subscription_id")
  isActive          Boolean           @default(true) @map("is_active")
  isComceMember     Boolean           @default(false) @map("is_comce_member")
  comceMemberNumber String?           @map("comce_member_number")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  users             User[]
  subscription      Subscription?
  reports           Report[]
  activities        CompanyActivity[]
  payments          Payment[]

  @@map("companies")
}

model Subscription {
  id              String            @id @default(cuid())
  companyId       String            @unique @map("company_id")
  plan            SubscriptionPlan
  status          SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime       @map("current_period_start")
  currentPeriodEnd   DateTime       @map("current_period_end")
  trialEndsAt     DateTime?         @map("trial_ends_at")
  canceledAt      DateTime?         @map("canceled_at")
  cancelAtPeriodEnd Boolean         @default(false) @map("cancel_at_period_end")
  priceMonthly    Float?            @map("price_monthly")
  priceYearly     Float?            @map("price_yearly")
  billingCycle    BillingCycle      @default(MONTHLY) @map("billing_cycle")
  reportsUsed     Int               @default(0) @map("reports_used")
  reportsLimit    Int               @default(10) @map("reports_limit")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payments        Payment[]

  @@map("subscriptions")
}

model Payment {
  id              String         @id @default(cuid())
  companyId       String         @map("company_id")
  subscriptionId  String?        @map("subscription_id")
  amount          Float
  currency        String         @default("COP")
  status          PaymentStatus  @default(PENDING)
  provider        PaymentProvider @default(WOMPI)
  providerPaymentId String?      @map("provider_payment_id")
  paymentMethod   String?        @map("payment_method")
  description     String?
  metadata        Json?
  paidAt          DateTime?      @map("paid_at")
  failedAt        DateTime?      @map("failed_at")
  failureReason   String?        @map("failure_reason")
  invoiceUrl      String?        @map("invoice_url")
  
  // Campos espec√≠ficos para Wompi
  wompiReference  String?        @unique @map("wompi_reference")
  wompiCheckoutUrl String?       @map("wompi_checkout_url")
  planType        String?        @map("plan_type") // trimestral, semestral, anual
  customerEmail   String?        @map("customer_email")
  
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

model Report {
  id          String       @id @default(cuid())
  companyId   String       @map("company_id")
  userId      String       @map("user_id")
  name        String
  type        ReportType
  status      ReportStatus @default(PENDING)
  parameters  Json
  results     Json?
  fileUrl     String?      @map("file_url")
  generatedAt DateTime?    @map("generated_at")
  expiresAt   DateTime?    @map("expires_at")
  downloadCount Int        @default(0) @map("download_count")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model ImportData {
  id                  String    @id @default(cuid())
  importerName        String    @map("importer_name")
  importerNit         String?   @map("importer_nit")
  supplierName        String    @map("supplier_name")
  supplierCountry     String    @map("supplier_country")
  productDescription  String    @map("product_description")
  tariffPosition      String    @map("tariff_position")
  cifValue            Float     @map("cif_value")
  fobValue            Float     @map("fob_value")
  freightCost         Float?    @map("freight_cost")
  insuranceCost       Float?    @map("insurance_cost")
  quantity            Float?
  unit                String?
  port                String?
  importDate          DateTime  @map("import_date")
  year                Int
  month               Int
  createdAt           DateTime  @default(now()) @map("created_at")

  @@index([importerName])
  @@index([supplierName])
  @@index([tariffPosition])
  @@index([year, month])
  @@index([importDate])
  @@map("import_data")
}

model ExportData {
  id                  String    @id @default(cuid())
  exporterName        String    @map("exporter_name")
  exporterNit         String?   @map("exporter_nit")
  clientName          String    @map("client_name")
  destinationCountry  String    @map("destination_country")
  productDescription  String    @map("product_description")
  tariffPosition      String    @map("tariff_position")
  fobValue            Float     @map("fob_value")
  quantity            Float?
  unit                String?
  port                String?
  exportDate          DateTime  @map("export_date")
  year                Int
  month               Int
  createdAt           DateTime  @default(now()) @map("created_at")

  @@index([exporterName])
  @@index([clientName])
  @@index([tariffPosition])
  @@index([year, month])
  @@index([exportDate])
  @@map("export_data")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String
  resource    String?
  metadata    Json?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("user_activities")
}

model CompanyActivity {
  id          String   @id @default(cuid())
  companyId   String   @map("company_id")
  action      String
  resource    String?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([createdAt])
  @@map("company_activities")
}

enum UserRole {
  ADMIN
  ANALYST
  VIEWER
}

enum CompanySize {
  SMALL      // < 100K USD annual import
  MEDIUM     // 100K - 1M USD
  LARGE      // > 1M USD
}

enum SubscriptionPlan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
}

enum PaymentProvider {
  WOMPI
  PAYU
  STRIPE
}

enum ReportType {
  MARKET_ANALYSIS
  SUPPLIER_DISCOVERY
  COMPETITOR_ANALYSIS
  CUSTOM
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
